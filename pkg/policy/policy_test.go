package policy_test

import (
	"fmt"
	"math/big"
	"testing"

	"flare-common/database"
	"flare-common/policy"

	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/require"
)

var log1 = database.Log{
	Address:         "32D46A1260BB2D8C9d5Ab1C9bBd7FF7D7CfaabCC",
	Data:            "00000000000000000000000000000000000000000000000000000000000a22100000000000000000000000000000000000000000000000000000000000007ffd323bc33f27edfbd2b353dbffa315a1815560978a536de7f8c6b433498a23332800000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000006669871f00000000000000000000000000000000000000000000000000000000000000120000000000000000000000008fe15e1048f90bc028a60007c7d5b55d9d20de66000000000000000000000000ccb478bba9c76ae21e13906a06aeb210ad3593cf0000000000000000000000004a45ada26e262bc9ad6bdd5fe1ce28ef10360e950000000000000000000000005635db9b68e39721af87c758deab3b9f4704e96e000000000000000000000000b461e9fbb50eb2208c6225123aabeddb1edc50cf0000000000000000000000009e283f56f1c3634aecf452411f0e9b4ab5b990880000000000000000000000006d03953961d5a1770c00c63230e0976b0b23446400000000000000000000000004e10101c0eea35ade286e3f6d4b0687834ea225000000000000000000000000d9b18332578ed71d5c01395c4fa5a09d04f7a386000000000000000000000000e1c9229f567881b16b7bfc80c8b1600d501dae3900000000000000000000000059709d15a1516f7e10551faf1b9739220e6ad380000000000000000000000000d3e71252f329943ddb1475d70dd4d9bef1ba5ce10000000000000000000000009ffa9cf5f677e925b6ecacbf66caefd7e1b9883a000000000000000000000000722829bcc9ec8c8feccbc71a104583dada5fa7e60000000000000000000000008ddf4c669efb4de0260b4ee1483dc876d73973cc000000000000000000000000139856198e6ec7cb620ed22b301f60c93ade040b0000000000000000000000005e5b3f46c8dea1ec415bd51047e66ee14a0f433c000000000000000000000000026ce8d829dec053b17175691a577e3da80de51f00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000035d700000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000035d700000000000000000000000000000000000000000000000000000000000035d7000000000000000000000000000000000000000000000000000000000000284b000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000035d70000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001b70012000acf000a22107ffd323bc33f27edfbd2b353dbffa315a1815560978a536de7f8c6b433498a2333288fe15e1048f90bc028a60007c7d5b55d9d20de660009ccb478bba9c76ae21e13906a06aeb210ad3593cf000c4a45ada26e262bc9ad6bdd5fe1ce28ef10360e95001a5635db9b68e39721af87c758deab3b9f4704e96e0004b461e9fbb50eb2208c6225123aabeddb1edc50cf35d79e283f56f1c3634aecf452411f0e9b4ab5b9908800046d03953961d5a1770c00c63230e0976b0b234464000504e10101c0eea35ade286e3f6d4b0687834ea2250009d9b18332578ed71d5c01395c4fa5a09d04f7a3860001e1c9229f567881b16b7bfc80c8b1600d501dae39000359709d15a1516f7e10551faf1b9739220e6ad3800003d3e71252f329943ddb1475d70dd4d9bef1ba5ce135d79ffa9cf5f677e925b6ecacbf66caefd7e1b9883a35d7722829bcc9ec8c8feccbc71a104583dada5fa7e6284b8ddf4c669efb4de0260b4ee1483dc876d73973cc0002139856198e6ec7cb620ed22b301f60c93ade040b35d75e5b3f46c8dea1ec415bd51047e66ee14a0f433c0002026ce8d829dec053b17175691a577e3da80de51f0002000000000000000000",
	Topic0:          "91d0280e969157fc6c5b8f952f237b03d934b18534dafcac839075bbc33522f8",
	Topic1:          "0000000000000000000000000000000000000000000000000000000000000acf",
	Topic2:          "NULL",
	Topic3:          "NULL",
	TransactionHash: "ac0ad17926cd7d3cf87e53d64e9a3d83d26934c9f78a5f6bf2038732677ce235",
	LogIndex:        53,
	Timestamp:       1718191903,
	BlockNumber:     16542520,
}

var log2 = database.Log{
	Address:         "32D46A1260BB2D8C9d5Ab1C9bBd7FF7D7CfaabCC",
	Data:            "00000000000000000000000000000000000000000000000000000000000a21200000000000000000000000000000000000000000000000000000000000007ffc616b40ce586d8121f17dca40e236eff569d2ee7412ee46884f1b24d2ead3b6dd00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000056000000000000000000000000000000000000000000000000000000000666932bf0000000000000000000000000000000000000000000000000000000000000011000000000000000000000000d9b18332578ed71d5c01395c4fa5a09d04f7a38600000000000000000000000059709d15a1516f7e10551faf1b9739220e6ad380000000000000000000000000d3e71252f329943ddb1475d70dd4d9bef1ba5ce10000000000000000000000009ffa9cf5f677e925b6ecacbf66caefd7e1b9883a000000000000000000000000722829bcc9ec8c8feccbc71a104583dada5fa7e60000000000000000000000004a45ada26e262bc9ad6bdd5fe1ce28ef10360e950000000000000000000000005635db9b68e39721af87c758deab3b9f4704e96e0000000000000000000000009e283f56f1c3634aecf452411f0e9b4ab5b990880000000000000000000000006d03953961d5a1770c00c63230e0976b0b234464000000000000000000000000b461e9fbb50eb2208c6225123aabeddb1edc50cf000000000000000000000000139856198e6ec7cb620ed22b301f60c93ade040b00000000000000000000000004e10101c0eea35ade286e3f6d4b0687834ea2250000000000000000000000005e5b3f46c8dea1ec415bd51047e66ee14a0f433c000000000000000000000000e1c9229f567881b16b7bfc80c8b1600d501dae390000000000000000000000008ddf4c669efb4de0260b4ee1483dc876d73973cc0000000000000000000000008fe15e1048f90bc028a60007c7d5b55d9d20de66000000000000000000000000ccb478bba9c76ae21e13906a06aeb210ad3593cf00000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000035d700000000000000000000000000000000000000000000000000000000000035d7000000000000000000000000000000000000000000000000000000000000284c000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000035d700000000000000000000000000000000000000000000000000000000000035d700000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000001a10011000ace000a21207ffc616b40ce586d8121f17dca40e236eff569d2ee7412ee46884f1b24d2ead3b6ddd9b18332578ed71d5c01395c4fa5a09d04f7a386000159709d15a1516f7e10551faf1b9739220e6ad3800003d3e71252f329943ddb1475d70dd4d9bef1ba5ce135d79ffa9cf5f677e925b6ecacbf66caefd7e1b9883a35d7722829bcc9ec8c8feccbc71a104583dada5fa7e6284c4a45ada26e262bc9ad6bdd5fe1ce28ef10360e95001a5635db9b68e39721af87c758deab3b9f4704e96e00049e283f56f1c3634aecf452411f0e9b4ab5b9908800046d03953961d5a1770c00c63230e0976b0b2344640005b461e9fbb50eb2208c6225123aabeddb1edc50cf35d7139856198e6ec7cb620ed22b301f60c93ade040b35d704e10101c0eea35ade286e3f6d4b0687834ea22500095e5b3f46c8dea1ec415bd51047e66ee14a0f433c0002e1c9229f567881b16b7bfc80c8b1600d501dae3900038ddf4c669efb4de0260b4ee1483dc876d73973cc00028fe15e1048f90bc028a60007c7d5b55d9d20de660009ccb478bba9c76ae21e13906a06aeb210ad3593cf000c00000000000000000000000000000000000000000000000000000000000000",
	Topic0:          "91d0280e969157fc6c5b8f952f237b03d934b18534dafcac839075bbc33522f8",
	Topic1:          "0000000000000000000000000000000000000000000000000000000000000ace",
	Topic2:          "NULL",
	Topic3:          "NULL",
	TransactionHash: "dd52c8d7bccf0ab3cdd05931930228d479ff5eb6af9dd8e068a0b3770c057799",
	LogIndex:        53,
	Timestamp:       1718170303,
	BlockNumber:     16529494,
}

func TestParseDatabaseLog(t *testing.T) {

	tests := []struct {
		log                database.Log
		rewardEpochId      int64
		startVotingRoundId uint32
		threshold          uint16
	}{
		{
			log:                log1,
			rewardEpochId:      2767,
			startVotingRoundId: 664080,
			threshold:          32765,
		},
		{
			log:                log2,
			rewardEpochId:      2766,
			startVotingRoundId: 663840,
			threshold:          32764,
		},
	}

	for i, test := range tests {

		event, err := policy.ParseSigningPolicyInitializedEvent(test.log)

		require.NoError(t, err)

		require.Equal(t, test.startVotingRoundId, event.StartVotingRoundId, fmt.Sprintf("error start voting round in test %d", i))

		require.Equal(t, big.NewInt(test.rewardEpochId), event.RewardEpochId)

	}

}

func TestNewSiginigPolicyLogs(t *testing.T) {
	tests := []struct {
		log         database.Log
		noOfVoters  int
		totalWeight uint16
		voter       string
		voterWeight uint16
		index       int
	}{
		{
			log:         log1,
			noOfVoters:  18,
			totalWeight: 65529,
			voter:       "5E5B3f46c8dEA1EC415Bd51047e66EE14A0F433C",
			voterWeight: 2,
			index:       16,
		},
		{
			log:         log2,
			noOfVoters:  17,
			totalWeight: 65528,
			voter:       "8fe15e1048f90bc028a60007c7d5b55d9d20de66",
			voterWeight: 9,
			index:       15,
		},
	}

	for i, test := range tests {

		event, err := policy.ParseSigningPolicyInitializedEvent(test.log)

		require.NoError(t, err)

		siginingPolicy := policy.NewSigningPolicy(event)

		require.Equal(t, test.totalWeight, siginingPolicy.Voters.TotalWeight, fmt.Sprintf("error total weight test %d", i))

		require.Len(t, siginingPolicy.Voters.VoterDataMap, test.noOfVoters, fmt.Sprintf("error number of voters test %d", i))

		voterData, ok := siginingPolicy.Voters.VoterDataMap[common.HexToAddress(test.voter)]

		require.True(t, ok, fmt.Sprintf("error missing voter in test %d", i))

		require.Equal(t, test.voterWeight, voterData.Weight, fmt.Sprintf("error wrong weight test %d", i))

		require.Equal(t, test.voterWeight, voterData.Weight, fmt.Sprintf("error wrong index test %d", i))

	}

}

func TestStorage(t *testing.T) {

	storage := policy.NewSigningPolicyStorage()

	event2, err := policy.ParseSigningPolicyInitializedEvent(log2)

	require.NoError(t, err)

	siginingPolicy2 := policy.NewSigningPolicy(event2)

	err = storage.Add(siginingPolicy2)

	require.NoError(t, err)

	event1, err := policy.ParseSigningPolicyInitializedEvent(log1)

	require.NoError(t, err)

	siginingPolicy1 := policy.NewSigningPolicy(event1)

	err = storage.Add(siginingPolicy1)

	require.NoError(t, err)

	policyFromStorage, ok := storage.GetForVotingRound(663845)

	require.True(t, !ok)

	require.Equal(t, uint16(65528), policyFromStorage.Voters.TotalWeight)

	policyFromStorage, ok = storage.GetForVotingRound(663445)

	require.True(t, !ok)

	require.Nil(t, policyFromStorage)

	policyFromStorage, ok = storage.GetForVotingRound(673445)

	require.True(t, ok)

	require.Equal(t, uint16(65529), policyFromStorage.Voters.TotalWeight)

	removeEmpty := storage.RemoveBeforeVotingRound(12)

	require.Len(t, removeEmpty, 0)

	removeOne := storage.RemoveBeforeVotingRound(667080)

	require.Len(t, removeOne, 1)

}
